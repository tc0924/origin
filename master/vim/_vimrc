" Leaderキーをスペースに設定
let mapleader = "\<Space>"
" 文字コードをUFT-8に設定
set fenc=utf-8
set encoding=utf-8
" バックアップファイルを作らない
set nobackup
" スワップファイルを作らない
set noswapfile
" 編集中のファイルが変更されたら自動で読み直す
set autoread
" バッファが編集中でもその他のファイルを開けるように
set hidden
" 入力中のコマンドをステータスに表示する
set showcmd
" undoファイルを1カ所にまとめる
set undodir=C:\vim\undo
" 行番号を表示
set number
" 現在の行を強調表示
set cursorline
" 行末の1文字先までカーソルを移動できるように
set virtualedit=onemore
" ビープ音を可視化
set visualbell
" 括弧入力時の対応する括弧を表示
set showmatch
" ステータスラインを常に表示
set laststatus=2
" コマンドラインの補完
set wildmode=list:longest,full
" 折り返し時に表示行単位での移動できるようにする
nnoremap j gj
nnoremap k gk
" バックスペースキーの有効化
set backspace=indent,eol,start
" Tab文字を半角スペースにする
set expandtab
" 行頭以外のTab文字の表示幅（スペースいくつ分）
set tabstop=2
" 行頭でのTab文字の表示幅
set shiftwidth=2
" 改行時に前の行のインデントを継続する
set autoindent 
" 改行時に前の行の構文をチェックし次の行のインデントを増減する
set smartindent
" 検索文字列が小文字の場合は大文字小文字を区別なく検索する
set ignorecase
" 検索文字列に大文字が含まれている場合は区別して検索する
set smartcase
" 検索文字列入力時に順次対象文字列にヒットさせる
set incsearch
" 検索時に最後まで行ったら最初に戻る
set wrapscan
" 検索結果をハイライト
set hlsearch
" ヤンク,カット操作によるクリップボードの操作
set clipboard=unnamed,autoselect
" 行が折り返し表示されていた場合、行単位ではなく表示行単位でカーソルを移動する
nnoremap j gj
nnoremap k gk
nnoremap <down> gj
nnoremap <up> gk
" ESCキーをCtrl+Jにマッピング
imap <c-j> <esc>
inoremap <silent> jj <ESC>
inoremap <silent> っj <ESC>
" 改行挿入時に挿入モードに移行しない([Space]+[Enter])
noremap <Space><CR> o<ESC>
" バッファの移動 
nnoremap <silent> <C-j> :bprev<CR>
nnoremap <silent> <C-k> :bnext<CR>
" 保存時に全角空白を半角空白×2個にする
if expand("%") !~? '^.*\(_\|\.\)vimrc'
  autocmd BufWritePre * :%s/  /  /g
endif
" 検索ハイライトを<esc><esc>で取り消す
nnoremap <ESC><ESC> :noh<CR>
" タブ・空白・改行等の表示
set list
set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%
" 不可視文字の色を変更
" hi NonText    ctermbg=None ctermfg=59 guibg=NONE guifg=None
" hi SpecialKey ctermbg=None ctermfg=59 guibg=NONE guifg=None
" grep検索時に自動でquickfix-windowを開く(|cwの入力不要)
autocmd QuickFixCmdPost *grep* cwindow
" コマンドモードの補完
set wildmenu
" 保存するコマンド履歴の数
set history=5000
" カーソルの左右移動で行末から次の行の行頭への移動が可能になる
set whichwrap=b,s,h,l,<,>,[,],~
" CJK文字対策
set ambiwidth=double
" 行番号の絶対⇔相対を切替
noremap <F3> :set relativenumber!<CR>
" pythonパス(環境により異なる)
if isdirectory(expand('~\AppData\Local\Continuum\anaconda3'))
  let g:python3_host_prog = expand('~\AppData\Local\Continuum\anaconda3\python.exe')
elseif isdirectory(expand('~\Anaconda3'))
  let g:python3_host_prog = expand('~\Anaconda3\python.exe')
else
  let g:python3_host_prog = expand('/usr/bin/python3')
endif

" ==============================================================================
" Vundle.vim START
" ==============================================================================

set nocompatible
filetype off

if has('win32') || has ('win64')
  set rtp+=~\.vim\bundle\Vundle.vim
else
  set rtp+=~/.vim/bundle/Vundle.vim
endif

call vundle#begin()

" この下に追加したいプラグインを入力する
Plugin 'VundleVim/Vundle.vim'
Plugin 'preservim/nerdtree'
Plugin 'Shougo/unite.vim'     
Plugin 'altercation/vim-colors-solarized'
Plugin 'markonm/traces.vim'   " 正規表現での検索をハイライト表示
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tpope/vim-fugitive'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
" deoplete.nvim start~~~~~~~~~~~~~~~~~~~~~~~
Plugin 'Shougo/deoplete.nvim'
Plugin 'roxma/nvim-yarp'
Plugin 'roxma/vim-hug-neovim-rpc'
Plugin 'wokalski/autocomplete-flow'
" deoplete.nvim end~~~~~~~~~~~~~~~~~~~~~~~~~
Plugin 'Shougo/neosnippet'
Plugin 'Shougo/neosnippet-snippets'
Plugin 'ryanoasis/vim-devicons'
Plugin 'cocopon/iceberg.vim'
Plugin 'yggdroot/indentline'
" markdown-preview.nvim start~~~~~~~~~~~~~~~~
" markdownプレビュー用(nodeとyarnがインストールされてパスが通ってること！)
" プラグインインストール後に手動でビルドした
" cd ~/.vim/bundle/markdown-preview.nvim\app
" yarn install
Plugin 'iamcco/markdown-preview.nvim'
" markdown-preview.nvim end~~~~~~~~~~~~~~~~~~
Plugin 'junegunn/vim-easy-align'
Plugin 'dracula/vim', { 'name': 'dracula' }

call vundle#end()
filetype plugin indent on
" ==============================================================================
" Vundle.vim END
" ==============================================================================

" ==============================================================================
" deoplete.nvim START
" ==============================================================================
" 自動起動
let g:deoplete#enable_at_startup = 1
" ==============================================================================
" deoplete.nvim END
" ==============================================================================

" ==============================================================================
" nerdtree START
" ==============================================================================
" 自動起動
" autocmd vimenter * NERDTree
" Ctrl+n で表示
map <C-n> :NERDTreeToggle<CR>
" <Leader>+n でカレントディレクトリを表示
map <Leader>n :NERDTree .<CR>
" 他のバッファをすべて閉じた時にNERDTreeが開いていたらNERDTreeも一緒に閉じる。
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" ==============================================================================
" nerdtree END
" ==============================================================================

" ==============================================================================
" vim-airline START  (フォントはCicaにしておく)
" ==============================================================================
let g:airline#extensions#tabline#enabled = 1              " タブ表示
let g:airline#extensions#tabline#formatter = 'default'
let g:airline_powerline_fonts = 1
set laststatus=2
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline_theme = 'dracula' " テーマは→ https://github.com/vim-airline/vim-airline/wiki/Screenshots
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = '☰'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'

" ==============================================================================
" vim-airline END
" ==============================================================================

" ==============================================================================
" vim-markdown START
" ==============================================================================
autocmd BufRead,BufNewFile *.mkd  set filetype=markdown
autocmd BufRead,BufNewFile *.md  set filetype=markdown
" 自動で折りたたまないようにする
let g:vim_markdown_folding_disabled=1
let g:previm_enable_realtime = 1
" Disabling conceal for code fences
let g:vim_markdown_conceal_code_blocks = 0
" To disable conceal regardless of conceallevel setting
let g:vim_markdown_conceal = 0
" ==============================================================================
" vim-markdown END
" ==============================================================================

" ==============================================================================
" neosnippet START
" ==============================================================================
let g:neosnippet#enable_completed_snippet = 1
" ==============================================================================
" neosnippet END
" ==============================================================================

" ==============================================================================
" Unit.vim START
" ==============================================================================
" 入力モードで開始する
" let g:unite_enable_start_insert=1
" バッファ一覧
noremap <Leader>b :Unite buffer<CR>
" ファイル一覧
noremap <Leader>f :Unite -buffer-name=file file<CR>
" ==============================================================================
" Unit.vim END
" ==============================================================================

" ==============================================================================
" vim-devicons START
" ==============================================================================
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
" ==============================================================================
" vim-devicons END
" ==============================================================================

" ==============================================================================
" vim-easy-align START
" ==============================================================================
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" ==============================================================================
" vim-easy-align END
" ==============================================================================
" ==============================================================================
" テーマ関連設定 START
" ==============================================================================
" 256色対応
set t_Co=256
" ダーク系のカラースキームを使う
set background=dark
" DirectX
set renderoptions=type:directx,renmode:5
" テーマ
colorscheme atom-dark-256
" シンタックス
syntax enable
" ==============================================================================
" テーマ関連設定 END
" ==============================================================================